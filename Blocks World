
function Welcome()
print("Welcome To The Blocks World")

#print("Enter the total number of blocks")
#n = parse(Int, readline())

println("Please be careful to not enter contradictory data.")
print("A block cannot be in two positions.")
print("Nor can two blocks occupy the same position. \n*The algorithm might fail to halt* \n\n")
print("ATTENTION! Enter 1 or 2")
print("\n[1]: All the blocks are in the box")
print("\n[2] There are blocks on the tables as well as in the box.")

mode = parse(Int, readline())
print("MODE: ")
print(mode)

print("Enter the total number of blocks")
       n = parse(Int, readline())

World(n)
return mode
end


#********************

function World(n)

       TableStacks()
       #table details here
        
       print("Enter the total number of blocks")
       n = parse(Int, readline())
       
       
       #mode = parse(Int, readline())
       #print("MODE: ")
       #print(mode)

       print("\n********************************************")

       currentStateB = Vector{Int}[]
       goalStateB = Vector{Int}[]

       g = 1
       while(g < 2*n + 1)
       println("Ënter table:")
       table = parse(Int, readline())

       println("Ënter stack:")
       stack = parse(Int, readline())

       println("Ënter height:")
       height = parse(Int, readline())
       if(g < n+1)
       push!(currentStateB, [g, table, stack, height])
       end

       if(g == n)
       print("\nAccepting Goal State: ")
       end

       if(g >= n+1)
       push!(goalStateB, [g-n, table, stack, height])

       end
       g = g+1
       end
       
       print("CTRL + L \nTo clear the screen afterwards \n")
       print("Initial state: \n")
       print(currentStateB)
       print("\n\n")
       print("Goal state: \n")
       print(goalStateB)

       end

#*****************

function printOrder(block, table, loadAt, topBlockThere)
      print("     Stack block number ", block)
		  print("\n     Onto table number ", table)
		  print("\n     At stack number ", loadAt)
		  print("\n     On top of block number ", topBlockThere)
     #=
      print("Stack block number", getBlockAt(table, stack, beingStacked[index], goalStateT))
		  print("\n Onto table number", table)
		  print("\n At stack number ", loadingDock[table])
		  print("On top of block number", getBlockAt(table, stack, beingStacked[index], currentStateT))
      =#
      #stack = counter - tableStarts[table]
  end		  

#*****************


function TableStacks()
print("Enter number of tables: \n")
noOfTables = parse(Int, readline())
tableNo = 1
tableStarts = []
v = 0
while(tableNo < noOfTables+1)
	print("Enter number of stacks for table ", tableNo)
    print("\n")
    
	noOfStacks = parse(Int, readline())
    v = v + noOfStacks
	push!(tableStarts, v - noOfStacks)
	tableNo = tableNo + 1
end
print("\n****************************************\n")
print("Table start indices (in table vector): ", tableStarts)
print("\n\n\n")
return tableStarts
#print(tableStarts)
end


#***************************
